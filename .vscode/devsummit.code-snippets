{
  "Create WebMap and MapView": {
    "prefix": "step-1-webmapAndMapview",
    "body": [
      "// Create a WebMap",
      "const map = new WebMap({",
      "  portalItem: {",
      "    id: \"076252b0fce8469ea45558f6b7b928ca\",",
      "  },",
      "});",
      "",
      "// Create a MapView",
      "const view = new MapView({",
      "  container: \"viewDiv\",",
      "  map,",
      "  popupEnabled: false,",
      "});"
    ],
    "description": "Code snippet to create a WebMap and a MapView"
  },
  "Load Layers and Get References": {
    "prefix": "step-2-loadLayers",
    "body": [
      "view.when(async () => {",
      "  // Wait for all the map layers to load",
      "  await view.map.loadAll();",
      "",
      "  // Get references to the layers in the web map",
      "  const buildingLayer = view.map.findLayerById(\"b5435bf9aa674c4f97dab633ce50ff65\");",
      "  const orientedImageryLayer = view.map.findLayerById(\"18df554895b-layer-5\");",
      "  const workOrdersLayer = view.map.findLayerById(\"5a5382f83c48491c888184bd664cb5d8\");",
      "",
      "  // Step 3: Create the OrientedImageryViewer",
      "",
      "  // Step 4: Add a load best image button to the work orders popup",
      "",
      "  // Step 5: Set up the click event for the view",
      "",
      "});"
    ],
    "description": "Code snippet to load all layers and get references to them"
  },
  "Create OrientedImageryViewer": {
    "prefix": "step-3-orientedImageryViewer",
    "body": [
      "// Create an OrientedImageryViewer widget",
      "const orientedImageryViewer = new OrientedImageryViewer({",
      "  container: \"oi-container\",",
      "  docked: true,",
      "  dockEnabled: true,",
      "  layer: orientedImageryLayer,",
      "  view,",
      "});"
    ],
    "description": "Code snippet to create an OrientedImageryViewer widget"
  },
  "Create CustomContent for PopupTemplate": {
    "prefix": "step-4-customContentPopup",
    "body": [
      "const customContent = new CustomContent({",
      "  outFields: [\"*\"],",
      "  creator: (event) => {",
      "    const viewImageryBtn = document.createElement(\"calcite-button\");",
      "    viewImageryBtn.setAttribute(\"appearance\", \"outline\");",
      "    viewImageryBtn.innerText = \"view available imagery\";",
      "    viewImageryBtn.onclick = () => {",
      "      orientedImageryViewer?.loadBestImage(event.graphic.geometry);",
      "    };",
      "    return viewImageryBtn;",
      "  },",
      "});",
      "workOrdersLayer.popupTemplate.content.push(customContent);"
    ],
    "description": "Code snippet to create a CustomContent for a PopupTemplate"
  },
  "Handle View Click and Button Click": {
    "prefix": "step-5-handleClicks",
    "body": [
      "// Set up the click event for the view",
      "view.on(\"click\", (event) => {",
      "  // If the map image conversion tool is active, don't do anything",
      "  if (orientedImageryViewer.mapImageConversionToolState) {",
      "    return;",
      "  }",
      "",
      "  // Stop the event from propagating",
      "  event.stopPropagation();",
      "",
      "  // Hit test the work orders layer",
      "  view.hitTest(event).then((response) => {",
      "    // Get the results from the hit test response",
      "    const { results } = response;",
      "",
      "    // If there is a graphic from the work orders layer in the results, open the popup",
      "    // Otherwise, load the best image from the oriented imagery layer",
      "    if (results[0]?.graphic?.layer === workOrdersLayer || results[0]?.graphic?.layer === buildingLayer) {",
      "      const popup = new Popup({",
      "        dockEnabled: true,",
      "        dockOptions: {",
      "          breakpoint: false,",
      "        },",
      "      });",
      "      view.popup = popup;",
      "      popup.open({",
      "        location: event.mapPoint,",
      "        features: [results[0].graphic],",
      "      });",
      "    } else {",
      "      orientedImageryViewer.loadBestImage(event.mapPoint);",
      "    }",
      "  });",
      "});",
      "",
      "// When the create-work-flow-button is clicked, start the work order flow",
      "document.querySelector(\"#create-work-flow-button\").onclick = async () => {",
      "  createWorkOrderFlow(orientedImageryViewer, workOrdersLayer);",
      "};",
      "",
      "// Update the table with the work order data",
      "updateTable(workOrdersLayer);"
    ],
    "description": "Code snippet to handle view click and button click"
  }
}
